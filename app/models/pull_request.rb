class PullRequest
  class << self
    def create(repo_name)
      data = load_query(repo_name)

      repo = Repo.new(data.dig("organization", "destination"))
      # TODO should this be rolled into Repo?
      destination_branch_name = data.dig("organization", "destination", "defaultBranchRef", "name")
      parent_commit_sha = data.dig("organization", "destination", "defaultBranchRef", "target", "oid")
      base_tree_sha = data.dig("organization", "destination", "defaultBranchRef", "target", "tree", "oid")

      filenames_to_add = [
        # TODO DRY
        ("CONTRIBUTING.md" unless repo.has_contributing_guidelines?),
        ("CODE_OF_CONDUCT.md" unless repo.has_code_of_conduct?),
      ].compact

      source_branch_name = data.dig("organization", "source", "defaultBranchRef", "name")
      source_commit_sha = data.dig("organization", "source", "defaultBranchRef", "target", "oid")

      make_pull_request(repo_name, filenames_to_add, source_branch_name, source_commit_sha, parent_commit_sha, base_tree_sha, destination_branch_name)
    end

    private

    def load_query(repo_name)
      #  TODO DRY
      body = JSON.dump(query: graphql_query, variables: graphql_query_variables(repo_name))

      uri = URI("https://api.github.com/graphql")
      headers = {"Authorization" => "token #{ENV["GITHUB_ACCESS_TOKEN"]}"}
      response = Net::HTTP.post(uri, body, headers)

      raise "Not success: #{response}" unless response.is_a?(Net::HTTPSuccess)

      JSON.parse(response.body)["data"]
    end

    def graphql_query
      <<~GRAPHQL
        query aQuery($destinationName: String!) {
          organization(login: "dxw") {
            source: repository(name: ".github") {
              defaultBranchRef {
                name
                target {
                  oid
                }
              }
            }
            destination: repository(name: $destinationName) {
              defaultBranchRef {
                name
                target {
                  oid
                  ... on Commit {
                    tree {
                      oid
                      entries {
                        name
                      }
                    }
                  }
                }
              }
            }
          }
        }
      GRAPHQL
    end

    def graphql_query_variables(repo_name)
      {"destinationName" => repo_name}
    end

    def make_pull_request(repo_name, filenames_to_add, source_branch_name, source_commit_sha, parent_commit_sha, base_tree_sha, destination_branch_name)
      file_contents = {}

      # TODO parallel
      filenames_to_add.each do |filename|
        # Using this instead of https://github.com/dxw/.github/raw/#{source_branch_name}/#{filename} to avoid handling redirect - TODO fix
        uri = URI("https://raw.githubusercontent.com/dxw/.github/#{source_branch_name}/#{filename}")
        response = Net::HTTP.get_response(uri)
        raise "Not success: #{response}" unless response.is_a?(Net::HTTPSuccess)

        file_contents[filename] = response.body
      end

      client = Octokit::Client.new(access_token: ENV["GITHUB_ACCESS_TOKEN"])

      destination = "dxw/#{repo_name}"

      # Create blobs
      blobs = file_contents.transform_values { |data|
        client.create_blob(destination, Base64.encode64(data), "base64")
      }

      # Create a tree
      tree_entries = blobs.map { |filename, blob|
        # TODO Oh, actually you can apparently pass content directly here
        {path: filename, mode: "100644", type: "blob", sha: blob}
      }

      tree = client.create_tree(destination, tree_entries, base_tree: base_tree_sha)

      # Create a commit
      commit_message = <<~MESSAGE
        Add contributing-related documentation

        These files are required by dxw tech team RFC 28 [1]. The content is
        taken from commit #{source_commit_sha[0...7]} of [2].

        This commit was generated by dxw’s repo-audit [3].

        [1] https://github.com/dxw/tech-team-rfcs/blob/master/rfc-028-adopt-a-code-of-conduct.md
        [2] https://github.com/dxw/.github
        [3] https://github.com/dxw/repo-audit
      MESSAGE
      commit = client.create_commit(destination, commit_message, tree.sha, parent_commit_sha)

      # Create a ref
      ref_name = "refs/heads/repo-audit/add-contributing-documentation"
      client.create_ref(destination, ref_name, commit.sha)

      # Create the pull request
      title = "Add contributing-related documentation"
      body = <<~MESSAGE
        These files are required by [dxw tech team RFC 28](https://github.com/dxw/tech-team-rfcs/blob/master/rfc-028-adopt-a-code-of-conduct.md). The content is taken from dxw/.github@#{source_commit_sha}.

        This pull request was generated by dxw’s [repo-audit](https://github.com/dxw/repo-audit).
      MESSAGE
      client.create_pull_request(destination, destination_branch_name, ref_name, title, body)
    end
  end
end
