class PullRequestCreator
  BRANCH_NAME = "repo-audit/add-contributing-documentation"
  REF_NAME    = "refs/heads/#{BRANCH_NAME}"
  PR_TITLE    = "Add contributing-related documentation"

  attr_reader :data, :repository_name

  def initialize(repo_name)
    @repository_name = repo_name
    @data = load_query(repository_name)
  end

  def repository_json
    data.dig("organization", "destination")
  end

  def destination_name
    "dxw/#{repository_name}"
  end

  # TODO should these be rolled into Repo?
  def destination_branch_name
    data.dig("organization", "destination", "defaultBranchRef", "name")
  end

  def parent_commit_sha
    data.dig("organization", "destination", "defaultBranchRef", "target", "oid")
  end

  def base_tree_sha
    data.dig("organization", "destination", "defaultBranchRef", "target", "tree", "oid")
  end

  def source_branch_name
    data.dig("organization", "source", "defaultBranchRef", "name")
  end

  def source_commit_sha
    data.dig("organization", "source", "defaultBranchRef", "target", "oid")
  end

  def open_pull_request
    repo = Repo.new(repository_json)

    filenames_to_add = [
      # TODO DRY
      ("CONTRIBUTING.md" unless repo.has_contributing_guidelines?),
      ("CODE_OF_CONDUCT.md" unless repo.has_code_of_conduct?),
    ].compact

    make_pull_request(destination_name, filenames_to_add)
  end

  private

  def pr_body
    <<~MESSAGE
    These files are required by [dxw tech team RFC 28](https://github.com/dxw/tech-team-rfcs/blob/master/rfc-028-adopt-a-code-of-conduct.md). The content is taken from dxw/.github@#{source_commit_sha}.

    This pull request was generated by dxw’s [repo-audit](https://github.com/dxw/repo-audit).
    MESSAGE
  end

  def commit_message
    <<~MESSAGE
    Add contributing-related documentation

    These files are required by dxw tech team RFC 28 [1]. The content is
    taken from commit #{source_commit_sha[0...7]} of [2].

    This commit was generated by dxw’s repo-audit [3].

    [1] https://github.com/dxw/tech-team-rfcs/blob/master/rfc-028-adopt-a-code-of-conduct.md
    [2] https://github.com/dxw/.github
    [3] https://github.com/dxw/repo-audit
    MESSAGE
  end

  def load_query(repo_name)
    #  TODO DRY
    body = JSON.dump(query: graphql_query, variables: graphql_query_variables(repo_name))

    uri = URI("https://api.github.com/graphql")
    headers = { "Authorization" => "token #{ENV["GITHUB_ACCESS_TOKEN"]}" }
    response = Net::HTTP.post(uri, body, headers)

    raise "Not success: #{response}" unless response.is_a?(Net::HTTPSuccess)

    JSON.parse(response.body)["data"]
  end

  def graphql_query
    <<~GRAPHQL
      query aQuery($destinationName: String!) {
        organization(login: "dxw") {
          source: repository(name: ".github") {
            defaultBranchRef {
              name
              target {
                oid
              }
            }
          }
          destination: repository(name: $destinationName) {
            defaultBranchRef {
              name
              target {
                oid
                ... on Commit {
                  tree {
                    oid
                    entries {
                      name
                    }
                  }
                }
              }
            }
          }
        }
      }
    GRAPHQL
  end

  def graphql_query_variables(repo_name)
    { "destinationName" => repo_name }
  end

  def make_pull_request(destination, filenames_to_add)
    file_contents = {}

    # TODO parallel
    filenames_to_add.each do |filename|
      file_contents[filename] = file_contents_source[filename]
    end

    client = Octokit::Client.new(access_token: ENV["GITHUB_ACCESS_TOKEN"])

    # Create blobs
    blobs = file_contents.transform_values { |data|
      client.create_blob(destination, Base64.encode64(data), "base64")
    }

    # Create a tree
    tree_entries = blobs.map { |filename, blob|
      # TODO Oh, actually you can apparently pass content directly here
      { path: filename, mode: "100644", type: "blob", sha: blob }
    }

    tree = client.create_tree(destination, tree_entries, base_tree: base_tree_sha)

    # Create a commit
    commit = client.create_commit(destination, commit_message, tree.sha, parent_commit_sha)

    # Create a ref
    client.create_ref(destination, REF_NAME, commit.sha)

    # Create the pull request
    client.create_pull_request(destination, destination_branch_name, REF_NAME, PR_TITLE, pr_body)
  end

  def file_contents_source
    {
      "CODE_OF_CONDUCT.md" => "This repository follows [dxw's standard code of conduct](https://github.com/dxw/.github/blob/main/CODE_OF_CONDUCT.md).",
      "CONTRIBUTING.md" => "The [dxw standard contributing guide](https://github.com/dxw/.github/blob/main/CONTRIBUTING.md) applies for this repository."
    }
  end
end
